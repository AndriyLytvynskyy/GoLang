package main

import "fmt"

func fib(n int, dict map[int]int) int {
	val, ok := dict[n]
	if ok {
		return val
	}
	if n == 0 {
		return 1
	}
	if n < 0 {
		return 0
	}
	fibonacci := fib(n-1, dict) + fib(n-2, dict)
	dict[n] = fibonacci

	return dict[n]
}
func isEven(n int) bool {
	return n%2 == 0
}

/*
Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

*/
func main() {

	m := make(map[int]int)
	sum := 0
	for j := 1; j <= 33; j++ {
		x := fib(j, m)
		if x > 4000000 {
			fmt.Println(sum)
			break
		}
		if isEven(x) {
			sum += x
		}
	}
}
